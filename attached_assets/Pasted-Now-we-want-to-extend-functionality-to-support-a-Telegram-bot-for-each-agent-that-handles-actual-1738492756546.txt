Now we want to extend functionality to support a **Telegram bot** for each agent that handles actual Q/A, polls, and giveaways. Here’s what we need:

1. **Telegram Bot Integration**:
   - Use a Node.js Telegram library (e.g., "telegraf" or "grammy") in the Express server.
   - For each agent created, store the Telegram Bot Token in the database (or .env for a single test bot).
   - When an agent is created with "Poll/Giveaway" or "Q/A" template, we want to:
     - Spin up or configure the bot instance to listen for commands in Telegram:
       - **Poll**: `!poll "Question" ["Option1","Option2"]`
       - **Giveaway**: `!giveaway "Prize" <duration>` (e.g., 1 hour)
       - **Q/A**: Could be an AMA mode—just log questions & store them.
   - In the server, maintain a “bot manager” that keeps track of each agent’s bot instance (if needed). Or start with a single global bot for testing.

2. **Poll/Giveaway Logic**:
   - **Data Models** (PostgreSQL):
     - `Polls` table: `id, agentId, question, options, startTime, endTime`
     - `Votes` table: `id, pollId, userId, selectedOption`
     - `Giveaways` table: `id, agentId, prize, startTime, endTime`
     - `GiveawayEntries` table: `id, giveawayId, userId`
   - **Endpoints**:
     - `POST /api/poll` – to create a new poll (the bot can call or server can auto-create on command).
     - `POST /api/poll/:id/vote` – to record a vote (the bot calls this).
     - `POST /api/giveaway` – to create a giveaway record.
     - `POST /api/giveaway/:id/enter` – user enters a giveaway.
   - **Command Handling**:
     - On `!poll` command, parse question/options, create a poll in DB, announce start.
     - On `!giveaway` command, parse the prize + duration, create giveaway in DB, schedule the end, and eventually pick a winner from `GiveawayEntries`.

3. **Bot Command Implementation**:
   - For the Telegram bot, implement command listeners. Example with Telegraf:
     ```ts
     bot.command('poll', (ctx) => { ... });
     bot.command('giveaway', (ctx) => { ... });
     ```
   - Each command triggers an Express API call to create the poll/giveaway in PostgreSQL. Then the bot confirms success in chat.
   - For voting or joining a giveaway, you can parse user replies or simple commands.

4. **Agent-Level vs. Single Bot**:
   - For simplicity, you can start with **one global Telegram bot** token (set in .env). 
   - The user’s agent ID can be embedded in the commands, e.g., `!poll 123 "Question" ["Option1","Option2"]`, so we know which agent is tied to this poll. 
   - Later, we can let each agent have its **own** token for truly separate bots if needed.

5. **UI Additions**:
   - In the front-end, display new poll/giveaway records in the agent’s detail page. Show past polls, results, or upcoming giveaways.

6. **Testing**:
   - Provide instructions for how to run the bot locally or on Replit (with a test Telegram Bot Token).
   - Create a sample agent with “Poll” template, then in Telegram type `!poll 123 "What's your favorite color?" ["Red","Blue"]`. Check DB for a new poll record.

7. **Security & Edge Cases**:
   - Validate commands so users can’t break the system with weird inputs.
   - Possibly track userId from Telegram handle for votes or giveaway entries.

Please implement this extension step by step. Use the existing codebase, add any needed routes, DB migrations, and the Telegram bot manager logic. Then provide a short README snippet explaining how to configure the bot token and test commands in Telegram. If any clarifications are needed, please ask. 
