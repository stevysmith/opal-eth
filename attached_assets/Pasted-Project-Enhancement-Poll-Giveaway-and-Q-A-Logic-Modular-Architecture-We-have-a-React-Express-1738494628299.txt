Project Enhancement: Poll, Giveaway, and Q&A Logic (Modular Architecture)

We have a React + Express + TypeScript application called “No-Code Social Agent Launcher.” The UI can create new agents (with three possible templates: Q/A, Poll, or Giveaway), and each agent triggers a Telegram bot welcome message. Now we want to implement the actual Q/A, Poll, and Giveaway functionalities in a clean, modular way.

Below are our detailed requirements:

--------------------------------------------------------------------------------
1) Database Tables (PostgreSQL)
--------------------------------------------------------------------------------

We need DB migrations/models for:

A) Polls & Votes
   - **polls**: columns
     - `id` (PK)
     - `agentId` (FK or reference to the agents table)
     - `question` (TEXT)
     - `options` (JSON or TEXT[])
     - `createdAt` (TIMESTAMP)
     - `endsAt` (TIMESTAMP, optional)
   - **votes**: columns
     - `id` (PK)
     - `pollId` (FK)
     - `userId` (STRING or TEXT) to store the Telegram user’s ID/handle
     - `selectedOption` (INT)
     - `votedAt` (TIMESTAMP)

B) Giveaways & Entries
   - **giveaways**:
     - `id` (PK)
     - `agentId`
     - `prize` (TEXT)
     - `startTime` (TIMESTAMP)
     - `endTime` (TIMESTAMP)
   - **giveaway_entries**:
     - `id` (PK)
     - `giveawayId` (FK)
     - `userId` (STRING or TEXT)
     - `enteredAt` (TIMESTAMP)

C) Q&A (Ask & Answer)
   - (Optional) **qna_sessions**:
     - `id` (PK)
     - `agentId`
     - `topic` (TEXT)
     - `startTime` (TIMESTAMP)
     - `endTime` (TIMESTAMP)
   - **questions**:
     - `id` (PK)
     - `agentId`
     - `sessionId` (nullable FK to qna_sessions)
     - `userId` (STRING or TEXT for Telegram user)
     - `questionText` (TEXT)
     - `createdAt` (TIMESTAMP)
     - `answerText` (TEXT, nullable)
     - `answeredAt` (TIMESTAMP, nullable)

--------------------------------------------------------------------------------
2) Services / Business Logic
--------------------------------------------------------------------------------

Create **three** service files in `server/src/services/` (or a similar folder):

A) **pollService.ts**
   - `createPoll(agentId: string, question: string, options: string[], endsAt?: Date): Promise<string>`
     - Inserts a row in `polls`, returns the new poll ID
   - `voteOnPoll(pollId: string, userId: string, optionIndex: number): Promise<void>`
     - Inserts a row in `votes`
   - `getPollResults(pollId: string): Promise<PollResults>` (define the return shape)
     - Aggregates votes, e.g., count each selectedOption

B) **giveawayService.ts**
   - `createGiveaway(agentId: string, prize: string, endTime: Date): Promise<string>`
     - Inserts a row in `giveaways`, returns the new giveaway ID
   - `enterGiveaway(giveawayId: string, userId: string): Promise<void>`
     - Inserts a row in `giveaway_entries`
   - `pickGiveawayWinner(giveawayId: string): Promise<string>` (randomly picks from entries)
     - Could return the winner’s userId

C) **qnaService.ts**
   - `createQuestion(agentId: string, userId: string, questionText: string, sessionId?: string): Promise<string>`
     - Inserts a row in `questions`, returns the new question ID
   - `answerQuestion(questionId: string, answerText: string): Promise<void>`
     - Updates the question’s `answerText` and `answeredAt`
   - `listQuestions(agentId: string, sessionId?: string): Promise<Question[]>`
     - Returns the questions for a given agent (and session if provided)
   - `createQASession(agentId: string, topic: string, startTime?: Date, endTime?: Date): Promise<string>` (optional)
     - Inserts a row in `qna_sessions`, returns the new session ID

Each of these service functions should perform the **DB inserts/queries** using our Postgres client or ORM. Keep them as pure as possible, with minimal references to Telegram or environment variables. That way, we can easily adapt to future sponsor integrations.

--------------------------------------------------------------------------------
3) Telegram Bot Commands
--------------------------------------------------------------------------------

We have a “hosting layer” that uses Telegram. Keep the Telegram command logic in `server/src/bot/telegram.ts` or a `commands/` subfolder. For each template, we have different commands:

A) **Q&A**:
   - `/ask "Your question here"`
     - Parse out the question text
     - Call `qnaService.createQuestion(agentId, userId, questionText)`
     - Reply with “Thanks for your question!” + question ID
   - `/answer <questionId> "Answer text"`
     - Parse questionId and answer
     - Call `qnaService.answerQuestion(questionId, answerText)`
     - Reply with “Answer recorded!”

B) **Poll**:
   - `/poll "Question" ["Option1","Option2"]`
     - Parse question/options
     - Call `pollService.createPoll(...)`
     - Reply with poll ID
   - `/vote <poll_id> <option_index>`
     - Call `pollService.voteOnPoll(...)`
     - Reply “Vote recorded!”

C) **Giveaway**:
   - `/giveaway "Prize" 2`
     - Means the prize is “Prize,” endTime = now + 2 hours
     - Call `giveawayService.createGiveaway(...)`
     - Reply with a new giveaway ID
   - `/enter <giveaway_id>`
     - Call `giveawayService.enterGiveaway(...)`
     - Reply with “You’re entered for giveaway #X!”

D) **Pick Winner** (Optional):
   - `/pickwinner <giveaway_id>`
     - Calls `pickGiveawayWinner(giveawayId)`
     - Randomly picks user from `giveaway_entries`
     - Reply with the winner’s Telegram user ID

Make sure each command is **agent-aware**. If you only have one global Telegram bot for now, you can store `agentId` in memory or in your DB. If you have multiple tokens, each agent has its own bot instance.

--------------------------------------------------------------------------------
4) Modularity & Future Sponsor Integrations
--------------------------------------------------------------------------------

Keep the logic in the services so we can easily port to Autonome, Gaia, or add on-chain logic with Coinbase, Flow, etc. The Telegram-specific code should only parse commands and call the relevant service functions.

--------------------------------------------------------------------------------
5) (Optional) Express Endpoints
--------------------------------------------------------------------------------

If desired, create endpoints like:
- `POST /api/polls` → calls `pollService.createPoll()`
- `POST /api/polls/:id/vote` → calls `pollService.voteOnPoll()`
- `POST /api/giveaways` → calls `giveawayService.createGiveaway()`
- `POST /api/giveaways/:id/enter` → calls `giveawayService.enterGiveaway()`
- `POST /api/questions` → calls `qnaService.createQuestion()`
- etc.

Then the Telegram bot code can use these HTTP endpoints or just directly import the service files.

--------------------------------------------------------------------------------
6) Implementation Steps
--------------------------------------------------------------------------------

1. **DB Migrations**: 
   - Add or update migrations for polls, votes, giveaways, giveaway_entries, qna_sessions (optional), and questions.

2. **Service Files**:
   - `pollService.ts`, `giveawayService.ts`, `qnaService.ts`
   - Implement the described methods with DB calls.

3. **Telegram Commands**:
   - In your bot code, parse user commands:
     - For Q&A: `/ask`, `/answer`
     - For Poll: `/poll`, `/vote`
     - For Giveaway: `/giveaway`, `/enter`, and maybe `/pickwinner`
   - Each command calls the relevant service method, then responds with success/failure messages.

4. **Testing**:
   - Provide example commands in Telegram to create a poll, vote, do a giveaway, enter it, create a Q&A question, answer it, etc.
   - Check that data is inserted in PostgreSQL and everything is consistent.

5. **Make Sure** to handle error scenarios gracefully (invalid format, poll/giveaway not found, etc.) and provide user-friendly messages.

Please generate all necessary code (DB migrations, service files, command handlers) to support Q&A, Poll, and Giveaway logic in our existing app. Keep the code modular for future sponsor integrations. Let me know if you need any clarifications. Thanks!
